# Use for editing http://editor.swagger.io/
swagger: '2.0'
info:
    description: 'This is a REST server for ioBroker.'
    version: '2.1.0'
    title: 'ioBroker Swagger UI'
    contact:
        email: 'admin@iobroker.net'
    license:
        name: 'Apache 2.0'
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: '/v1'
#schemes:
#  - http
#  - https
tags:
    - name: 'state'
      description: 'Read, write the states'
    - name: 'object'
      description: 'Read the objects'
    - name: 'history'
      description: 'Read the history'
    - name: 'enum'
      description: 'Read the categories'
    - name: 'commands'
      description: 'Socket commands'
    - name: 'sendTo'
      description: 'Send message to instance'
    - name: 'file'
      description: 'Read/Write files and directories'
securityDefinitions:
    basicAuth:
        type: basic
    bearerAuth:
        type: apiKey
        name: Authorization
        in: header
        description: 'Enter your bearer token in the format **Bearer &lt;token&gt;**'
security:
    - basicAuth: []
    - bearerAuth: []
paths:
    /state/{stateId}:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Read value and all attributes of the state'
            description: 'This path could be used for controlling of the state too. If you provide the value in request, so it will be handled as write request. For back compatibility with simple-api'
            operationId: 'readState'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to return'
                  required: true
                  type: 'string'
                - name: 'withInfo'
                  in: 'query'
                  description: 'If with object information'
                  type: 'boolean'
                - in: 'query'
                  name: 'timeout'
                  description: 'Wait till the value written in ms'
                  required: false
                  type: 'integer'
                  format: 'int64'
                - in: 'query'
                  name: 'value'
                  description: 'Value to write into state'
                  type: 'string'

            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
        patch:
            tags:
                - 'state'
            summary: 'Update the value of the state'
            description: ''
            operationId: 'updateState'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'stateId'
                  description: 'ID of the state to write'
                  required: true
                  type: 'string'
                - in: 'query'
                  name: 'timeout'
                  description: 'Wait till the value written in ms'
                  required: false
                  type: 'integer'
                  format: 'int64'
                - in: 'body'
                  required: true
                  name: 'data'
                  description: 'State object to write'
                  schema:
                      $ref: '#/definitions/WriteState'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                400:
                    description: 'Invalid state ID supplied'
                404:
                    description: 'State not found'
                405:
                    description: 'Invalid value'

    /state/{stateId}/toggle:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Toggle value of the state'
            operationId: 'toggleState'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to toggle'
                  required: true
                  type: 'string'
                - name: 'timeout'
                  in: 'query'
                  description: 'Timeout in ms for the state will be updated again, e.g. for ack=true'
                  type: 'number'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
    /state/{stateId}/plain:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Get only value of the state.'
            operationId: 'plainState'
            produces:
                - 'text/plain;charset=UTF-8'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to read'
                  required: true
                  type: 'string'
                - name: 'extraPlain'
                  in: 'query'
                  description: 'If value.toString() should be returned. Without this flag JSON.stringify(value) will be returned'
                  type: 'boolean'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
    /state/{stateId}/subscribe:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Subscribe on state changes'
            description: 'Subscribe on state changes'
            operationId: 'subscribeStateGet'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to toggle'
                  required: true
                  type: 'string'
                - name: 'method'
                  in: 'query'
                  required: true
                  description: 'method=polling forces subscribe via long polling'
                  enum: [polling, POST, GET, PUT, PATCH]
                  type: 'string'
                - name: 'onchange'
                  type: 'boolean'
                  description: 'If the updates must be delivered if the value changed'
                  in: 'query'
                - name: 'delta'
                  type: 'number'
                  description: 'Minimal delta to trigger the event'
                  in: 'query'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
        post:
            tags:
                - 'state'
            summary: 'Subscribe on state changes'
            description: 'Subscribe on state changes'
            operationId: 'subscribeState'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to toggle'
                  required: true
                  type: 'string'
                - name: 'subscribe'
                  in: 'body'
                  description: 'Subscribe request'
                  required: false
                  schema:
                      $ref: '#/definitions/UrlHook'
                - name: 'method'
                  in: 'query'
                  description: 'method=polling forces subscribe via long polling'
                  type: 'string'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/State'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
        delete:
            tags:
                - 'state'
            summary: 'Unsubscribe from state changes'
            description: 'Unsubscribe on state changes'
            operationId: 'unsubscribeState'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'ID of the state to unsubscribe'
                  required: true
                  type: 'string'
                - name: 'subscribe'
                  in: 'body'
                  description: 'Subscribe request'
                  required: false
                  schema:
                      $ref: '#/definitions/UrlHook'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'State not found'
                400:
                    description: 'Invalid state ID supplied'
    /states:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Get list of states'
            operationId: 'listStates'
            produces:
                - 'application/json'
            parameters:
                - name: 'filter'
                  in: 'query'
                  description: 'Filter, like modbus.0.*'
                  required: true
                  type: 'string'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        type: 'object'
                        additionalProperties:
                            $ref: '#/definitions/State'
                400:
                    description: 'Invalid filter supplied'
    /states/subscribe:
        x-swagger-router-controller: state
        get:
            tags:
                - 'state'
            summary: 'Read current subscribes'
            operationId: 'getStatesSubscribes'
            produces:
                - 'application/json'
            parameters:
                - name: 'method'
                  in: 'query'
                  required: true
                  description: 'The same method as by subscription'
                  enum: [polling, POST, GET, PUT, PATCH]
                  type: 'string'
                - name: 'url'
                  description: 'The same URL as by subscription. By polling it must be omitted'
                  in: 'query'
                  type: 'string'
                - name: 'sid'
                  in: 'query'
                  type: 'string'
                  description: 'Only if method=polling: session ID'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'URL or session not found'
                422:
                    description: 'Invalid parameters supplied'
        post:
            tags:
                - 'state'
            summary: 'Subscribe for state updates'
            operationId: 'subscribeStates'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'Subscribe'
                  in: 'body'
                  description: 'URL of web hook and the subscribe pattern'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHookWithPattern'
            responses:
                200:
                    description: 'successful operation'
                400:
                    description: 'Invalid filter supplied'
        delete:
            tags:
                - 'state'
            summary: 'Unsubscribe from state updates.'
            description: 'If no filter provided, all subscribes will be cleared for this web hook'
            operationId: 'unsubscribeStates'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'UnSubscribe'
                  in: 'body'
                  description: 'URL of web hook and the unsubscribe pattern'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHook'
            responses:
                200:
                    description: 'successful operation'
                400:
                    description: 'Invalid filter supplied'
    /object/{objectId}:
        x-swagger-router-controller: object
        get:
            tags:
                - 'object'
            summary: 'Read object'
            description: ''
            operationId: 'readObject'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'ID of the object to return'
                  required: true
                  type: 'string'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/Object'
                404:
                    description: 'Object not found'
                400:
                    description: 'Invalid object ID supplied'
        post:
            tags:
                - 'object'
            summary: 'Create the object'
            description: 'Create new object. If object already exists, the error will be returned'
            operationId: 'createObject'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'objectId'
                  description: 'ID of the object to write'
                  required: true
                  type: 'string'
                - in: 'body'
                  name: 'value'
                  description: 'Object'
                  required: true
                  schema:
                      $ref: '#/definitions/Object'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/Object'
                400:
                    description: 'Invalid object ID supplied'
                409:
                    description: 'Object already exists'
                405:
                    description: 'Invalid object structure'
        put:
            tags:
                - 'object'
            summary: 'Update the object'
            description: 'To delete the parts of the object, set the value to ''null'', like {"common": {"desc": null} to delete the "common.desc". If object does not exist it will be created'
            operationId: 'updateObject'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'objectId'
                  description: 'ID of the object to write'
                  required: true
                  type: 'string'
                - in: 'body'
                  name: 'value'
                  description: 'Object'
                  required: true
                  schema:
                      $ref: '#/definitions/Object'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/Object'
                400:
                    description: 'Invalid object ID supplied'
                404:
                    description: 'Object not found'
                405:
                    description: 'Invalid object structure'
        delete:
            tags:
                - 'object'
            summary: 'Delete object'
            description: ''
            operationId: 'deleteObject'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'ID of the object to be deleted'
                  required: true
                  type: 'string'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'Object not found'
                400:
                    description: 'Invalid object ID supplied'
    /object/{objectId}/subscribe:
        x-swagger-router-controller: object
        post:
            tags:
                - 'object'
            summary: 'Subscribe on object changes'
            description: 'Subscribe on object changes'
            operationId: 'subscribeObject'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'ID of the state to subscribe'
                  required: true
                  type: 'string'
                - name: 'url'
                  in: 'body'
                  description: 'URL of web hook'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHook'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/Object'
                404:
                    description: 'Object not found'
                400:
                    description: 'Invalid object ID supplied'
        delete:
            tags:
                - 'object'
            summary: 'Unsubscribe from object changes'
            description: 'Unsubscribe on object changes'
            operationId: 'unsubscribeObject'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'ID of the object to unsubscribe'
                  required: true
                  type: 'string'
                - name: 'subscribe'
                  in: 'body'
                  description: 'Subscribe request'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHook'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'Object not found'
                400:
                    description: 'Invalid object ID supplied'
    /objects:
        x-swagger-router-controller: object
        get:
            tags:
                - 'object'
            summary: 'Get list of objects'
            operationId: 'listObjects'
            produces:
                - 'application/json'
            parameters:
                - name: 'filter'
                  in: 'query'
                  description: 'Filter, like modbus.0.*'
                  required: true
                  type: 'string'
                - name: 'type'
                  in: 'query'
                  description: 'Type of objects'
                  required: false
                  type: 'string'
                  enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/ObjectArray'
                404:
                    description: 'URL or session not found'
                422:
                    description: 'Invalid parameters supplied'
    /objects/subscribe:
        x-swagger-router-controller: object
        get:
            tags:
                - 'state'
            summary: 'Read current subscribes'
            operationId: 'getObjectsSubscribes'
            produces:
                - 'application/json'
            parameters:
                - name: 'method'
                  in: 'query'
                  required: true
                  description: 'method=polling forces subscribe via long polling'
                  enum: [polling, POST, GET, PUT, PATCH]
                  type: 'string'
                - name: 'url'
                  description: 'The same URL as by subscription. By polling it must be omitted'
                  in: 'query'
                  type: 'string'
                - name: 'sid'
                  in: 'query'
                  type: 'string'
                  description: 'Only if method=polling: session ID'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'URL or session not found'
                422:
                    description: 'Invalid parameters supplied'
        post:
            tags:
                - 'object'
            summary: 'Subscribe for objects updates'
            operationId: 'subscribeObjects'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'Subscribe'
                  in: 'body'
                  description: 'URL of web hook and the subscribe pattern'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHookWithPattern'
            responses:
                200:
                    description: 'successful operation'
                400:
                    description: 'Invalid filter supplied'
        delete:
            tags:
                - 'object'
            summary: 'Unsubscribe from object updates'
            description: 'If no filter provided, all the object subscribes will be cleared for this web hook'
            operationId: 'unsubscribeObjects'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'Unsubscribe'
                  in: 'body'
                  description: 'URL of web hook and the unsubscribe pattern'
                  required: true
                  schema:
                      $ref: '#/definitions/UrlHook'
            responses:
                200:
                    description: 'successful operation'
                400:
                    description: 'Invalid filter supplied'
    /getHistory:
        x-swagger-router-controller: history
        post:
            tags:
                - 'history'
            summary: 'Reads history'
            operationId: 'postHistory'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'Options'
                  in: 'body'
                  description: 'Options for history'
                  required: true
                  schema:
                      $ref: '#/definitions/HistoryRequest'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/HistoryResponse'
                422:
                    description: 'Invalid options supplied'
    /getHistory/{stateId}:
        x-swagger-router-controller: history
        get:
            tags:
                - 'history'
            summary: 'Reads history'
            operationId: 'getHistory'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'State ID'
                  type: 'string'
                  required: true
                - name: start
                  in: 'query'
                  type: 'number'
                  description: 'Start time in ms'
                - name: end
                  in: 'query'
                  type: 'number'
                  description: 'End time in ms'
                - name: count
                  in: 'query'
                  type: 'number'
                  description: "number of values if aggregate is 'onchange' or number of intervals if other aggregate method. Count will be ignored if step is set, else default is 500 if not set"
                - name: from
                  in: 'query'
                  type: 'boolean'
                  description: 'if FROM field should be included in answer'
                - name: ack
                  in: 'query'
                  type: 'boolean'
                  description: 'if ACK field should be included in answer'
                - name: q
                  in: 'query'
                  type: 'boolean'
                  description: 'if Q field should be included in answer'
                - name: addId
                  in: 'query'
                  type: 'boolean'
                  description: 'if ID field should be included in answer'
                - name: limit
                  in: 'query'
                  type: 'number'
                  description: 'do not return more entries than limit'
                - name: ignoreNull
                  in: 'query'
                  type: 'boolean'
                  description: 'if null values should be included (false), replaced by last not null value (true) or replaced with 0 (0)'
                - name: removeBorderValues
                  in: 'query'
                  type: 'boolean'
                  description: 'By default additional border values are returned to optimize charting. Set this option to true if this is not wanted (e.g. for script data processing)'
                - name: returnNewestEntries
                  in: 'query'
                  type: 'boolean'
                  description: 'The returned data are always sorted by timestamp ascending. When using aggregate none and also providing count or limit this means that normally the oldest entries are returned (unless no start data is provided). Set this option to true to get the newest entries instead.'
                - name: aggregate
                  in: 'query'
                  type: 'string'
                  description: 'Aggregation method'
                  enum: [minmax, max, min, average, total, count, percentile, quantile, integral, none]
                - name: percentile
                  in: 'query'
                  type: 'number'
                  description: '(optional) when using aggregate method percentile defines the percentile level (0..100)(defaults to 50)'
                - name: quantile
                  in: 'query'
                  type: 'number'
                  description: '(optional) when using aggregate method quantile defines the quantile level (0..1)(defaults to 0.5)'
                - name: integralUnit
                  in: 'query'
                  type: 'string'
                  description: '(optional) when using aggregate method integral defines the unit in seconds (defaults to 60s). e.g. to get integral in hours for Wh or such, set to 3600.'
                - name: integralInterpolation
                  in: 'query'
                  type: 'string'
                  description: '(optional) when using aggregate method integral defines the interpolation method (defaults to none).'
                  enum: [linear, none]
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/HistoryResponse'
                422:
                    description: 'Invalid options supplied'
    /addHistory:
        x-swagger-router-controller: history
        post:
            tags:
                - 'history'
            summary: 'Add entry to history'
            operationId: 'addHistoryByPost'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'Options'
                  in: 'body'
                  description: 'Options for add history'
                  required: true
                  schema:
                      $ref: '#/definitions/HistoryAddRequest'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/HistoryAddResponse'
                422:
                    description: 'Invalid options supplied'
    /addHistory/{stateId}:
        x-swagger-router-controller: history
        get:
            tags:
                - 'history'
            summary: 'Add entry to history'
            operationId: 'addHistoryByGet'
            produces:
                - 'application/json'
            parameters:
                - name: 'stateId'
                  in: 'path'
                  description: 'State ID'
                  type: 'string'
                  required: true
                - name: val
                  in: 'query'
                  type: 'number'
                  description: 'Value'
                  required: true
                - name: ts
                  in: 'query'
                  type: 'number'
                  description: 'Timestamp in ms. If empty current time is used'
                - name: ack
                  in: 'query'
                  type: 'number'
                  description: 'Acknowledge flag'
                - name: q
                  in: 'query'
                  type: 'number'
                  description: 'Quality flag'
                - name: from
                  in: 'query'
                  type: 'number'
                  description: 'From which instance'
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/HistoryAddResponse'
                422:
                    description: 'Invalid options supplied'
    /enum:
        x-swagger-router-controller: enum
        get:
            tags:
                - 'enum'
            summary: 'Reads categories of enums'
            operationId: 'readMainEnums'
            produces:
                - 'application/json'
            responses:
                200:
                    description: 'successful operation'
    /enum/{enumId}:
        x-swagger-router-controller: enum
        get:
            tags:
                - 'enum'
            summary: 'Reads enums of specific type'
            operationId: 'readEnums'
            produces:
                - 'application/json'
            parameters:
                - name: 'enumId'
                  in: 'path'
                  description: 'Enum ID in form "functions" or "room" without "enum."'
                  type: 'string'
                  required: true
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/EnumResponse'
                404:
                    description: 'Category not found'
    /sendto/{instance}:
        x-swagger-router-controller: sendTo
        get:
            tags:
                - 'sendTo'
            summary: 'Send message to instance'
            description: 'You can send message to instance that supports it'
            operationId: 'sendTo'
            produces:
                - 'application/json'
            parameters:
                - name: 'instance'
                  in: 'path'
                  description: 'Instance, like javascript.0'
                  required: true
                  type: 'string'
                - name: 'message'
                  in: 'query'
                  description: 'Command name, like toScript'
                  type: 'string'
                  required: true
                - in: 'query'
                  name: 'data'
                  description: 'Data to be sent to instance. JSON or string'
                  required: false
                  type: 'string'
                - in: 'query'
                  name: 'noResponse'
                  description: 'Do not wait for answer or no answer'
                  required: false
                  type: 'boolean'
                - in: 'query'
                  name: 'timeout'
                  description: 'Timeout for answer'
                  required: false
                  type: 'number'
            responses:
                200:
                    description: 'Answer from instance if received'
                408:
                    description: 'Timeout'
                422:
                    description: 'Invalid state ID supplied'
                500:
                    description: 'instance is offline'
        post:
            tags:
                - 'sendTo'
            summary: 'Send message to instance as POST'
            description: 'You can send message to instance that supports it'
            operationId: 'sendToPost'
            consumes:
                - 'application/json'
            produces:
                - 'application/json'
            parameters:
                - name: 'instance'
                  in: 'path'
                  description: 'Instance, like javascript.0'
                  required: true
                  type: 'string'
                - name: 'data'
                  in: 'body'
                  description: 'Data and message'
                  required: true
                  schema:
                      $ref: '#/definitions/SendToData'
            responses:
                200:
                    description: 'Answer from instance if received'
                408:
                    description: 'Timeout'
                422:
                    description: 'Invalid state ID supplied'
                500:
                    description: 'instance is offline'
    /file/{objectId}/{fileName}:
        x-swagger-router-controller: file
        get:
            tags:
                - 'file'
            summary: 'Reads file'
            operationId: 'readFile'
            produces:
                - 'application/octet-stream'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'Object ID, like vis.0'
                  type: 'string'
                  required: true
                - name: 'fileName'
                  in: 'path'
                  description: 'File name, like main/vis-views.json'
                  type: 'string'
                  required: true
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'File not found'
        post:
            tags:
                - 'file'
            summary: 'Writes file'
            operationId: 'writeFile'
            produces:
                - 'application/json'
            consumes:
                - 'multipart/form-data'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'Object ID, like vis.0'
                  type: 'string'
                  required: true
                - name: 'fileName'
                  in: 'path'
                  description: 'File name, like main/vis-views.json'
                  type: 'string'
                  required: true
                - name: 'file'
                  in: 'formData'
                  description: 'File content'
                  required: true
                  type: 'file'
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'File not found'
        delete:
            tags:
                - 'file'
            summary: 'deletes file'
            operationId: 'deleteFile'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'Object ID, like vis.0'
                  type: 'string'
                  required: true
                - name: 'fileName'
                  in: 'path'
                  description: 'File name, like main/vis-views.json'
                  type: 'string'
                  required: true
            responses:
                200:
                    description: 'successful operation'
                404:
                    description: 'File not found'
    /dir/{objectId}/{dirName}:
        x-swagger-router-controller: file
        get:
            tags:
                - 'file'
            summary: 'List directory'
            operationId: 'readDir'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'Object ID, like vis.0'
                  type: 'string'
                  required: true
                - name: 'dirName'
                  in: 'path'
                  description: 'File name, like main/vis-views.json'
                  type: 'string'
                  required: true
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/DirResponse'
                404:
                    description: 'File not found'
    /dir/{objectId}:
        x-swagger-router-controller: file
        get:
            tags:
                - 'file'
            summary: 'List directory'
            operationId: 'readDir'
            produces:
                - 'application/json'
            parameters:
                - name: 'objectId'
                  in: 'path'
                  description: 'Object ID, like vis.0'
                  type: 'string'
                  required: true
            responses:
                200:
                    description: 'successful operation'
                    schema:
                        $ref: '#/definitions/DirResponse'
                404:
                    description: 'File not found'

    # commands start
    /command/getStates:
        get:
            tags:
                - "commands"
            summary: "get the list of states for pattern (e.g. for system.adapter.admin.0.*). GUI can have problems by visualization of answer."
            produces:
                - "application/json"
            parameters:
               - name: "pattern"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getForeignStates:
        get:
            tags:
                - "commands"
            summary: "same as getStates"
            produces:
                - "application/json"
            parameters:
               - name: "pattern"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getState:
        get:
            tags:
                - "commands"
            summary: "get state value by ID"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/setState:
        get:
            tags:
                - "commands"
            summary: "set state value with JSON object (e.g. {\"val\": 1, \"ack\": true})"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "state"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getBinaryState:
        get:
            tags:
                - "commands"
            summary: "get binary state by ID"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/setBinaryState:
        get:
            tags:
                - "commands"
            summary: "set binary state by ID"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "base64"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getObject:
        get:
            tags:
                - "commands"
            summary: "get object by ID"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getObjects:
        get:
            tags:
                - "commands"
            summary: "get all states and rooms. GUI can have problems by visualization of answer."
            produces:
                - "application/json"
            parameters:
               - name: "list"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getObjectView:
        get:
            tags:
                - "commands"
            summary: "get specific objects, e.g. design=system, search=state, params={\"startkey\": \"system.adapter.admin.\", \"endkey\": \"system.adapter.admin.\u9999\"}"
            produces:
                - "application/json"
            parameters:
               - name: "design"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "search"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "params"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/setObject:
        get:
            tags:
                - "commands"
            summary: "set object with JSON object (e.g. {\"common\": {\"type\": \"boolean\"}, \"native\": {}, \"type\": \"state\"})"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "obj"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/delObject:
        get:
            tags:
                - "commands"
            summary: "delete object by ID"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/readFile:
        get:
            tags:
                - "commands"
            summary: "read file, e.g. adapter=vis.0, fileName=main/vis-views.json. Additionally, you can set option in query binary=true to get answer as file and not as json"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/readFile64:
        get:
            tags:
                - "commands"
            summary: "read file as base64 string, e.g. adapter=vis.0, fileName=main/vis-views.json. Additionally, you can set option in query binary=true to get answer as file and not as json"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/writeFile64:
        get:
            tags:
                - "commands"
            summary: "write file, e.g. adapter=vis.0, fileName=main/vis-test.json, data64=eyJhIjogMX0="
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "data64"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/unlink:
        get:
            tags:
                - "commands"
            summary: "delete file or folder"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "name"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/deleteFile:
        get:
            tags:
                - "commands"
            summary: "delete file"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "name"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/deleteFolder:
        get:
            tags:
                - "commands"
            summary: "delete folder"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "name"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/renameFile:
        get:
            tags:
                - "commands"
            summary: "rename file"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "oldName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "newName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/rename:
        get:
            tags:
                - "commands"
            summary: "rename file or folder"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "oldName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "newName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/mkdir:
        get:
            tags:
                - "commands"
            summary: "create folder"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "dirName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/readDir:
        get:
            tags:
                - "commands"
            summary: "read content of folder"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "dirName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/chmodFile:
        get:
            tags:
                - "commands"
            summary: "change file mode. E.g. adapter=vis.0, fileName=main/*, options = {\"mode\": 0x644}"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/chownFile:
        get:
            tags:
                - "commands"
            summary: "change file owner. E.g. adapter=vis.0, fileName=main/*, options = {\"owner\": \"newOwner\", \"ownerGroup\": \"newgroup\"}"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/fileExists:
        get:
            tags:
                - "commands"
            summary: "check if file exists"
            produces:
                - "application/json"
            parameters:
               - name: "adapter"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "fileName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
# admin commands start
    /command/getHostByIp:
        get:
            tags:
                - "commands"
            summary: "read host information by IP. e.g. by localhost"
            produces:
                - "application/json"
            parameters:
               - name: "ip"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/readLogs:
        get:
            tags:
                - "commands"
            summary: "read file name and size of log files. You can read them with http://ipaddress:8093/<fileName>"
            produces:
                - "application/json"
            parameters:
               - name: "host"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/delState:
        get:
            tags:
                - "commands"
            summary: "delete state and object. Same as delObject"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getRatings:
        get:
            tags:
                - "commands"
            summary: "read adapter ratings (as in admin)"
            produces:
                - "application/json"
            parameters:
               - name: "update"
                 in: "query"
                 description: ""
                 type: "boolean"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/getCurrentInstance:
        get:
            tags:
                - "commands"
            summary: "read adapter namespace (always rest-api.0)"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/decrypt:
        get:
            tags:
                - "commands"
            summary: "decrypt string with system secret"
            produces:
                - "application/json"
            parameters:
               - name: "encryptedText"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/encrypt:
        get:
            tags:
                - "commands"
            summary: "encrypt string with system secret"
            produces:
                - "application/json"
            parameters:
               - name: "plainText"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getAdapters:
        get:
            tags:
                - "commands"
            summary: "get objects of type \"adapter\". You can define optionally adapterName"
            produces:
                - "application/json"
            parameters:
               - name: "adapterName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/updateLicenses:
        get:
            tags:
                - "commands"
            summary: "read licenses from ioBroker.net portal"
            produces:
                - "application/json"
            parameters:
               - name: "login"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "password"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactInstances:
        get:
            tags:
                - "commands"
            summary: "read list of instances with short information"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactAdapters:
        get:
            tags:
                - "commands"
            summary: "read list of installed adapters with short information"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactInstalled:
        get:
            tags:
                - "commands"
            summary: "read short information about installed adapters"
            produces:
                - "application/json"
            parameters:
               - name: "host"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactSystemConfig:
        get:
            tags:
                - "commands"
            summary: "read short system config"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactSystemRepositories:
        get:
            tags:
                - "commands"
            summary: ""
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactRepository:
        get:
            tags:
                - "commands"
            summary: "read short repository"
            produces:
                - "application/json"
            parameters:
               - name: "host"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getCompactHosts:
        get:
            tags:
                - "commands"
            summary: "get short information about hosts"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/addUser:
        get:
            tags:
                - "commands"
            summary: "add new user"
            produces:
                - "application/json"
            parameters:
               - name: "user"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "pass"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/delUser:
        get:
            tags:
                - "commands"
            summary: "delete user"
            produces:
                - "application/json"
            parameters:
               - name: "user"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/addGroup:
        get:
            tags:
                - "commands"
            summary: "create new group"
            produces:
                - "application/json"
            parameters:
               - name: "group"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "desc"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "acl"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/delGroup:
        get:
            tags:
                - "commands"
            summary: "delete group"
            produces:
                - "application/json"
            parameters:
               - name: "group"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/changePassword:
        get:
            tags:
                - "commands"
            summary: "change user password"
            produces:
                - "application/json"
            parameters:
               - name: "user"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "pass"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getAllObjects:
        get:
            tags:
                - "commands"
            summary: "read all objects as list. GUI can have problems by visualization of answer."
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/extendObject:
        get:
            tags:
                - "commands"
            summary: "modify object by ID with JSON. (.e.g. {\"common\":{\"enabled\": true}}) "
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "obj"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getForeignObjects:
        get:
            tags:
                - "commands"
            summary: "same as getObjects"
            produces:
                - "application/json"
            parameters:
               - name: "pattern"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "type"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/delObjects:
        get:
            tags:
                - "commands"
            summary: "delete objects by pattern"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
# admin commands end
    /command/updateTokenExpiration:
        get:
            tags:
                - "commands"
            summary: ""
            produces:
                - "application/json"
            parameters:
               - name: "accessToken"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/log:
        get:
            tags:
                - "commands"
            summary: "add log entry to ioBroker log"
            produces:
                - "application/json"
            parameters:
               - name: "text"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "level"
                 in: "query"
                 description: ""
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/checkFeatureSupported:
        get:
            tags:
                - "commands"
            summary: "check if feature is supported by js-controller."
            produces:
                - "application/json"
            parameters:
               - name: "feature"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
                 enum: [ALIAS, ALIAS_SEPARATE_READ_WRITE_ID, ADAPTER_GETPORT_BIND, ADAPTER_DEL_OBJECT_RECURSIVE, ADAPTER_SET_OBJECT_SETS_DEFAULT_VALUE, ADAPTER_AUTO_DECRYPT_NATIVE, PLUGINS, CONTROLLER_NPM_AUTO_REBUILD, CONTROLLER_READWRITE_BASE_SETTINGS, CONTROLLER_MULTI_REPO, CONTROLLER_LICENSE_MANAGER, DEL_INSTANCE_CUSTOM]        
            responses:
                200:
                    description: "successful operation"
    /command/getHistory:
        get:
            tags:
                - "commands"
            summary: "read history. See for options: https://github.com/ioBroker/ioBroker.history/blob/master/docs/en/README.md#access-values-from-javascript-adapter"
            produces:
                - "application/json"
            parameters:
               - name: "id"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "options"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
    /command/httpGet:
        get:
            tags:
                - "commands"
            summary: "read URL from server. You can set binary=true to get answer as file"
            produces:
                - "application/json"
            parameters:
               - name: "url"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/sendTo:
        get:
            tags:
                - "commands"
            summary: "send command to instance. E.g. adapterInstance=history.0, command=getHistory, message={\"id\": \"system.adapter.admin.0.memRss\",\"options\": {\"aggregate\": \"onchange\", \"addId\": true}}"
            produces:
                - "application/json"
            parameters:
               - name: "adapterInstance"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "command"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "message"
                 in: "query"
                 description: "JSON object"
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/listPermissions:
        get:
            tags:
                - "commands"
            summary: "read static information with function permissions"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getUserPermissions:
        get:
            tags:
                - "commands"
            summary: "read object with user permissions"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getVersion:
        get:
            tags:
                - "commands"
            summary: "read adapter name and version"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/getAdapterName:
        get:
            tags:
                - "commands"
            summary: "read adapter name (always rest-api)"
            produces:
                - "application/json"        
            responses:
                200:
                    description: "successful operation"
    /command/clientSubscribe:
        get:
            tags:
                - "commands"
            summary: ""
            produces:
                - "application/json"
            parameters:
               - name: "targetInstance"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "messageType"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true
               - name: "data"
                 in: "query"
                 description: ""
                 type: "string"
                 required: true        
            responses:
                200:
                    description: "successful operation"
    /command/getAdapterInstances:
        get:
            tags:
                - "commands"
            summary: "get objects of type \"instance\". You can define optionally adapterName"
            produces:
                - "application/json"
            parameters:
               - name: "adapterName"
                 in: "query"
                 description: ""
                 type: "string"
                 required: false        
            responses:
                200:
                    description: "successful operation"
# commands stop
definitions:
    State:
        type: 'object'
        properties:
            id:
                type: 'string'
                description: 'ID of the state'
            val:
                description: 'Actual value'
            q:
                type: 'integer'
                format: 'int32'
                description: 'Quality'
            ts:
                type: 'integer'
                format: 'int64'
                description: 'Timestamp in ms from epoch of last update'
            lc:
                type: 'integer'
                format: 'int64'
                description: 'Timestamp in ms from epoch of last value change'
            ack:
                type: 'boolean'
                description: 'Is acknowledged. true = update, false = command'
            from:
                type: 'string'
                description: 'Instance, that wrote this value'
            expire:
                type: 'integer'
                description: 'Expire in seconds'
            type:
                type: 'string'
                description: 'Always = state'
            common:
                type: 'object'
                description: 'Common state description'
            native:
                type: 'object'
                description: 'Native state description'
    WriteState:
        type: 'object'
        properties:
            val:
                description: 'Actual value'
            q:
                type: 'integer'
                format: 'int32'
                description: 'Quality'
            ts:
                type: 'integer'
                format: 'int64'
                description: 'Timestamp in ms from epoch of last update'
            lc:
                type: 'integer'
                format: 'int64'
                description: 'Timestamp in ms from epoch of last value change'
            ack:
                type: 'boolean'
                description: 'Is acknowledged. true = update, false = command'
            expire:
                type: 'integer'
                description: 'Expire in seconds'
    #Type:
    #  type: "string"
    #  enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
    Object:
        type: 'object'
        properties:
            _id:
                type: 'string'
                description: 'ID of the state'
            type:
                type: 'string'
                description: 'Type of this object'
                enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
            common:
                type: 'object'
                description: 'Common state description'
            native:
                type: 'object'
                description: 'Native state description'
    ObjectArray:
        type: 'object'
        additionalProperties:
            $ref: '#/definitions/Object'
    UrlHook:
        type: 'object'
        properties:
            url:
                type: 'string'
                description: 'URL'
            method:
                type: 'string'
                description: 'HTTP Method'
                enum: [polling, POST, GET, PUT, PATCH]
    UrlHookWithPattern:
        type: 'object'
        required: [pattern]
        properties:
            url:
                type: 'string'
                description: 'URL'
            onchange:
                type: 'boolean'
                description: 'If the updates must be delivered if the value changed'
            pattern:
                type: 'string'
                description: 'Subscribe pattern like: "system.adapter.admin.0.*"'
            method:
                type: 'string'
                description: 'HTTP Method'
                enum: [polling, POST, GET, PUT, PATCH]
    HistoryOptions:
        type: 'object'
        #required: [pattern]
        properties:
            start:
                type: 'number'
                description: 'Start time in ms'
            end:
                type: 'number'
                description: 'End time in ms'
            count:
                type: 'number'
                description: "number of values if aggregate is 'onchange' or number of intervals if other aggregate method. Count will be ignored if step is set, else default is 500 if not set"
            from:
                type: 'boolean'
                description: 'if FROM field should be included in answer'
            ack:
                type: 'boolean'
                description: 'if ACK field should be included in answer'
            q:
                type: 'boolean'
                description: 'if Q field should be included in answer'
            addId:
                type: 'boolean'
                description: 'if ID field should be included in answer'
            limit:
                type: 'number'
                description: 'do not return more entries than limit'
            ignoreNull:
                type: 'boolean'
                description: 'if null values should be included (false), replaced by last not null value (true) or replaced with 0 (0)'
            removeBorderValues:
                type: 'boolean'
                description: 'By default additional border values are returned to optimize charting. Set this option to true if this is not wanted (e.g. for script data processing)'
            returnNewestEntries:
                type: 'boolean'
                description: 'The returned data are always sorted by timestamp ascending. When using aggregate none and also providing count or limit this means that normally the oldest entries are returned (unless no start data is provided). Set this option to true to get the newest entries instead.'
            aggregate:
                type: 'string'
                description: 'Aggregation method'
                enum: [minmax, max, min, average, total, count, percentile, quantile, integral, none]
            percentile:
                type: 'number'
                description: '(optional) when using aggregate method percentile defines the percentile level (0..100)(defaults to 50)'
            quantile:
                type: 'number'
                description: '(optional) when using aggregate method quantile defines the quantile level (0..1)(defaults to 0.5)'
            integralUnit:
                type: 'string'
                description: '(optional) when using aggregate method integral defines the unit in seconds (defaults to 60s). e.g. to get integral in hours for Wh or such, set to 3600.'
            integralInterpolation:
                type: 'string'
                description: '(optional) when using aggregate method integral defines the interpolation method (defaults to none).'
                enum: [linear, none]
    HistoryRequest:
        type: 'object'
        required: [id]
        properties:
            id:
                type: 'string'
                description: 'State ID'
            options:
                $ref: '#/definitions/HistoryOptions'
    HistoryEntry:
        type: 'object'
        properties:
            val:
                description: 'Value'
            ts:
                type: 'number'
                description: 'Timestamp in ms'
            ack:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if ACK set true in request options'
            from:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if FROM set true in request options'
            q:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if Q set true in request options'
            id:
                type: 'string'
                description: 'State ID. Will be returned only if addId set true in request options'
    HistoryResponse:
        type: 'array'
        items:
            $ref: '#/definitions/HistoryEntry'
    HistoryAddEntry:
        type: 'object'
        properties:
            val:
                description: 'Value'
            ts:
                type: 'number'
                description: 'Timestamp in ms'
            ack:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if ACK set true in request options'
            from:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if FROM set true in request options'
            q:
                type: 'boolean'
                description: 'Acknowledge flag. Will be returned only if Q set true in request options'
    HistoryAddRequest:
        properties:
            id:
                type: 'string'
                description: 'State ID'
            state:
                $ref: '#/definitions/HistoryAddEntry'
    HistoryAddResponse:
        properties:
            success:
                type: 'boolean'
                description: 'true'
            error:
                type: 'string'
                description: 'Error description'
    EnumCommon:
        type: 'object'
        properties:
            name:
                type: 'string'
                description: 'Name can be string or object'
            icon:
                type: 'string'
                description: 'Icon for category (optional)'
            desc:
                type: 'string'
                description: 'Description can be string or object'
            members:
                type: 'array'
                items:
                    type: 'string'
    EnumEntry:
        type: 'object'
        properties:
            _id:
                type: 'string'
                description: 'Enum ID'
            common:
                $ref: '#/definitions/EnumCommon'
            type:
                type: 'string'
                description: 'Always enum'
    EnumResponse:
        type: 'array'
        items:
            $ref: '#/definitions/EnumEntry'
    FileEntry:
        type: 'object'
        properties:
            file:
                type: 'string'
                description: 'File name'
            stats:
                type: 'object'
                description: 'File size'
                properties:
                    size:
                        type: 'number'
                        description: 'File size in bytes'
            isDir:
                type: 'boolean'
                description: 'Is directory'
            modifiedAt:
                type: 'number'
                description: 'Modification time in ms'
            createdAt:
                type: 'number'
                description: 'Creation time in ms'
    DirResponse:
        type: 'array'
        items:
            $ref: '#/definitions/FileEntry'

    SendToData:
        type: 'object'
        properties:
            message:
                type: 'string'
                description: 'Message or command, like toScript'
            data:
                type: 'object'
                description: 'String or JSON Object that will be sent'
            noAnswer:
                type: 'boolean'
                description: 'If wait for answer'
            timeout:
                type: 'number'
                description: 'Timeout for answer'

externalDocs:
    description: 'Find out more about ioBroker'
    url: 'https://www.iobroker.net'
